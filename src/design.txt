
1. when 'include' encountered need to stack stuff. What does this mean?

2. need to 'push' the include file.

3. need to 'return' to the io part of the world to open the file.

4. need to use the currect state of defines to process the file.

5. when a file is finished th define state needs to be continued/assed on

6. when file has been finished need to pop the list of files to be processed

7. need to be able to resume a parse state. 

so

1. start with a list of files to be processed.

2. want to build the rsult from the end

initial state - list of files, d


(files, continuations, result) =

if files - open top file, parse it (tail files, cont, result) -> (files', cont', result') 
   recurse with (files', cont', result ++ result)

if cont - resume head cont (files, tail cont, result) -> (files',cont' result')
   recurse with (files', cont', result++result')
otherwise return result.

driver ((file:files), conts, defines, result) =
    do s <- readFile file
       (files', conts', defines', result') <- parse (files, conts, defines) s
       driver (files',conts', defines', result ++ result')
driver ([], (cont: conts), defines, result) =
    do (files, conts', defines', result') <- resume cont ([], conts, defines)
       driver (files, conts', defines', result ++ result')
driver ([],[], _, result) = return result